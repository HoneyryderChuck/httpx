module HTTPX
  module Transcoder
    module GRPCEncoding

      def self?.encode: (body_encoder body, compressed: bool) -> Deflater

      def self?.decode: (Response | StreamResponse response) -> Inflater

      class Deflater
        attr_reader content_type: String

        @body: BodyReader
        @compressed: bool

        def initialize: (body_encoder body, compressed: bool) -> void

        def bytesize: () -> (Integer | Float)

        def read: (?int? length, ?string outbuf) -> String?
      end

      class Inflater
        @response: Response
        @grpc_encodings: Array[String]

        def initialize: (Response | StreamResponse response) -> void

        def call: (String message) ?{ (String) -> void } -> String

        private

        def grpc_encodings: () -> Array[String]
      end

    end
  end
end