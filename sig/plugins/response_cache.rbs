module HTTPX
  module Plugins
    module ResponseCache
      CACHEABLE_VERBS: Array[verb]
      CACHEABLE_STATUS_CODES: Array[Integer]
      SUPPORTED_VARY_HEADERS: Array[String]

      def self?.cacheable_response?: (::HTTPX::ErrorResponse | cacheResponse response) -> bool

      def self?.not_modified?: (response response) -> bool

      interface _ResponseCacheOptions
        def response_cache_store: () -> Store

        def supported_vary_headers: () -> Array[String]
      end

      interface _ResponseCacheStore
        def get: (cacheRequest request) -> cacheResponse?

        def set: (cacheRequest request, cacheResponse response) -> void

        def clear: () -> void
      end

      module InstanceMethods
        @response_cache: Store

        def clear_response_cache: () -> void

        private

        def prepare_cache: (cacheRequest request) -> void

        def cacheable_request?: (cacheRequest request) -> bool

        def match_by_vary?: (cacheRequest request, cacheResponse response) -> bool
      end

      module RequestMethods
        attr_accessor cached_response: cacheResponse?

        @response_cache_key: String

        def response_cache_key: () -> String

        def cacheable_verb?: () -> bool
      end

      module ResponseMethods
        @cache: bool

        def cached?: () -> bool

        def mark_as_cached!: () -> void

        def copy_from_cached!: () -> void

        def fresh?: () -> bool

        def cache_control: () -> Array[String]?

        def vary: () -> Array[String]?

        private

        def age: () -> Integer

        def date: () -> Time
      end


      type cacheOptions = Options & _ResponseCacheOptions

      type cacheRequest = Request & RequestMethods

      type cacheResponse = Response & ResponseMethods
    end

    type sessionResponseCache = Session & ResponseCache::InstanceMethods
  end
end