module HTTPX
  class Request::Body
    attr_reader threshold_size: Integer?

    @headers: Headers
    @body: body_encoder?
    @unbounded_body: bool

    def initialize: (Headers headers, Options options) -> void

    def each: () { (String) -> void } -> void
            | () -> Enumerable[String]

    def rewind: () -> void

    def empty?: () -> bool

    def bytesize: () -> (Integer | Float)

    def stream: (Transcoder::_Encoder) -> bodyIO

    def unbounded_body?: () -> bool

    def chunked?: () -> bool

    def chunk!: () -> void

    private

    def initialize_body: (Options options) -> void

    def self.initialize_deflater_body: (body_encoder body, Encoding | String encoding) -> body_encoder
  end

  class ProcIO
    @block: ^(String) -> void

    def initialize: (^(String) -> void) -> untyped

    def write: (String data) -> Integer
  end
end