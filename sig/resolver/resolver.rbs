module HTTPX
  module Resolver
    class Resolver
      include Callbacks
      include Loggable

      RECORD_TYPES: Hash[Integer, singleton(Resolv::DNS::Resource)]

      @record_type: singleton(Resolv::DNS::Resource)
      @options: Options
      @resolver_options: Hash[Symbol, untyped]
      @queries: Hash[String, Connection]
      @system_resolver: Resolv::Hosts

      def close: () -> void

      alias terminate close

      def closed?: () -> bool

      def empty?: () -> bool

      def emit_addresses: (Connection connection, ip_family family, Array[IPAddr], ?bool early_resolve) -> void

      private

      def emit_resolved_connection: (Connection connection, Array[IPAddr] addresses, bool early_resolve) -> void

      def initialize: (ip_family? family, Options options) -> void

      def early_resolve: (Connection connection, ?hostname: String) -> boolish

      def emit_resolve_error: (Connection connection, ?String hostname, ?StandardError) -> void

      def resolve_error: (String hostname, ?StandardError?) -> (ResolveError | ResolveTimeoutError)
    end
  end
end
