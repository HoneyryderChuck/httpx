module HTTPX
  class Request
    extend Forwardable
    include Callbacks

    METHODS: Array[Symbol]
    USER_AGENT: String

    attr_reader verb: Symbol
    attr_reader uri: URI::Generic
    attr_reader headers: Headers
    attr_reader body: Body
    attr_reader state: Symbol
    attr_reader options: Options
    attr_reader response: response?
    attr_reader drain_error: StandardError?

    @trailers: Headers?
    @informational_status: Integer?
    @query: String?
    @drainer: Enumerator[String, void]?

    def initialize: (Symbol | String, generic_uri, ?options) -> untyped

    def interests: () -> (:r | :w)

    def merge_headers: (_Each[[String, headers_value]]) -> void

    def scheme: () -> String

    def response=: (response) -> void

    def path: () -> String

    def authority: () -> String

    def origin: () -> String

    def query: () -> String

    def drain_body: () -> String?

    def inspect: () -> String

    def transition: (Symbol) -> void

    def expects?: () -> boolish

    def trailers: () -> Headers

    def trailers?: () -> boolish

    class Body
      @headers: Headers
      @body: body_encoder?
      @unbounded_body: bool

      def initialize: (Headers, Options) -> untyped
      def each: () { (String) -> void } -> void
              | () -> Enumerable[String]

      def rewind: () -> void
      def empty?: () -> bool
      def bytesize: () -> Numeric
      def stream: (Transcoder::_Encoder) -> bodyIO
      def unbounded_body?: () -> bool
      def chunked?: () -> bool
      def chunk!: () -> void
      def inspect: () -> String
    end

    class ProcIO
      @block: ^(String) -> void

      def initialize: (^(String) -> void) -> untyped

      def write: (String data) -> Integer
    end
  end
end
