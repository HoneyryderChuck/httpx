module HTTPX
  module Chainable
    def request: (*Request, **untyped) -> Array[response]
               | (Request, **untyped) -> response
               | (verb, uri | [uri], **untyped) -> response
               | (Array[[verb, uri] | [verb, uri, options]], **untyped) -> Array[response]
               | (verb, _Each[uri | [uri, options]], **untyped) -> Array[response]

    def accept: (String) -> Session
    def wrap: () { (Session) -> void } -> void

    def with: (options) -> Session
            | (options) { (Session) -> void } -> void

    def plugin: (:auth, ?options) -> Plugins::sessionAuthorization
              | (:basic_auth, ?options) -> Plugins::sessionBasicAuth
              | (:digest_auth, ?options) -> Plugins::sessionDigestAuth
              | (:ntlm_auth, ?options) -> Plugins::sessionNTLMAuth
              | (:aws_sdk_authentication, ?options) -> Plugins::sessionAwsSdkAuthentication
              | (:compression, ?options) -> Session
              | (:cookies, ?options) -> Plugins::sessionCookies
              | (:expect, ?options) -> Session
              | (:follow_redirects, ?options) -> Plugins::sessionFollowRedirects
              | (:upgrade, ?options) -> Session
              | (:h2c, ?options) -> Session
              | (:multipart, ?options) -> Session
              | (:persistent, ?options) -> Plugins::sessionPersistent
              | (:proxy, ?options) -> (Plugins::sessionProxy & Plugins::httpProxy)
              | (:push_promise, ?options) -> Plugins::sessionPushPromise
              | (:retries, ?options) -> Plugins::sessionRetries
              | (:rate_limiter, ?options) -> Session
              | (:stream, ?options) -> Plugins::sessionStream
              | (:aws_sigv4, ?options) -> Plugins::awsSigV4Session
              | (:grpc, ?options) -> Plugins::grpcSession
              | (:response_cache, ?options) -> Plugins::sessionResponseCache
              | (:circuit_breaker, ?options) -> Plugins::sessionCircuitBreaker
              | (:oauth, ?options) -> Plugins::sessionOAuth
              | (Symbol | Module, ?options) { (Class) -> void } -> Session
              | (Symbol | Module, ?options) -> Session

    private

    def default_options: () -> Options
    def branch: (options) -> Session
              | (options) { (Session) -> void } -> Session
  end
end
