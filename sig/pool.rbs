module HTTPX
  class Pool
    type resolver_manager = Resolver::Multi | Resolver::System

    @resolvers: Hash[Class, resolver_manager]
    @timers: Timers
    @selector: Selector
    @connections: Array[Connection]
    @eden_connections: Array[Connection]
    @connected_connections: Integer

    def empty?: () -> void

    def next_tick: () -> void

    def close: (?Array[Connection] connections) -> void

    def init_connection: (Connection connection, Options options) -> void

    def find_connection: (URI::Generic uri, Options options) -> Connection?

    def deactivate: (*Array[Connection]) -> void

    private

    def initialize: () -> void

    def try_clone_connection: (Connection connection, Integer? family) -> Connection

    def resolve_connection: (Connection) -> void

    def on_resolver_connection: (Connection) -> void

    def on_resolver_error: (Connection, StandardError) -> void

    def on_resolver_close: (Resolver::Resolver) -> void

    def register_connection: (Connection) -> void

    def unregister_connection: (Connection) -> void

    def select_connection: (Selector::selectable) -> void

    def deselect_connection: (Selector::selectable) -> Selector::selectable?

    def coalesce_connections: (Connection coalescable, Connection coalescing) -> void

    def next_timeout: () -> Numeric?

    def find_resolver_for: (Connection) { (Resolver::Resolver resolver) -> void } -> resolver_manager
  end
end
