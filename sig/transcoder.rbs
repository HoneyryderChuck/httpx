module HTTPX
  type bodyIO = _Reader | _Each[[String, untyped]] | _ToS

  module Transcoder
    def self?.registry: (String tag) -> _Encode
                   | () -> Hash[String, _Encode]

    def self?.register: (String tag, _Encode handler) -> void

    def self?.normalize_keys: [U] (_ToS key, _ToAry[untyped] | _ToHash[_ToS, untyped] | untyped value, ?(^(untyped value) -> bool | nil) cond) { (String, ?untyped) -> U } -> U

    def self?.normalize_query: (Hash[String, untyped] params, String name, String v, Integer depth) -> void

    interface _Encode
      def encode: (untyped payload) -> (_Encoder | _Each[String])
    end

    interface _Encoder
      def bytesize: () -> Numeric
    end

    interface _Decoder
      def call: (Response response, untyped options) -> untyped
    end
  end
end
