module HTTPX
  interface _Selectable
    def state: () -> Symbol

    def to_io: () -> IO

    def call: () -> void

    def interests: () -> io_interests?

    def timeout: () -> Numeric?

    def handle_socket_timeout: (Numeric interval) -> void
  end

  class Selector
    include _Each[_Selectable]

    READABLE: Array[Symbol]
    WRITABLE: Array[Symbol]

    @timers: Timers

    @selectables: Array[_Selectable]
    @is_timer_interval: bool

    def next_tick: () -> void

    def terminate: () -> void

    def find_resolver: (Options options) -> Resolver::Resolver?

    def find_connection: (http_uri request_uri, Options options) -> Connection?

    def each_connection: () { (Connection) -> void} -> void
                       | () -> Enumerable[Connection]

    def find_mergeable_connection: (Connection connection) -> Connection?

    def empty?: () -> bool

    def register: (_Selectable io) -> void

    def deregister: (_Selectable io) -> _Selectable?

    private

    def initialize: () -> void

    def select: (Numeric? interval) { (_Selectable) -> void } -> void

    def select_many: (Numeric? interval) { (_Selectable) -> void } -> void

    def select_one: (Numeric? interval) { (_Selectable) -> void } -> void

    def next_timeout: () -> Numeric?
  end

  type io_interests = :r | :w | :rw
end