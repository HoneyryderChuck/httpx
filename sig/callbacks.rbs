module HTTPX
  interface _Callable
    def call: (*untyped) -> void
  end

  module Callbacks
    def on: (Symbol) { (*untyped) -> void } -> void
    def once: (Symbol) { (*untyped) -> void } -> void
    def only: (Symbol) { (*untyped) -> void } -> void
    def emit: (Symbol, *untyped) -> void

    def callbacks_for?: (Symbol) -> bool
    def callbacks: () -> Hash[Symbol, Array[_Callable]]
                  | (Symbol) -> Array[_Callable]
  end
end